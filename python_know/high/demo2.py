# 钻石继承搜索模式
"""
这是Python的新式类，也就是有一个以上的超类会通往同一个跟高级的超类
python的经典类继承搜索绝对是深度优先，然后是才左向右。一路向上搜索，深入树的左侧，返回后，才开始右侧
在新式类中，相对于说是宽度优先的，Python现寻找第一个搜索的右侧的所有超类，然后才一路往上搜索至顶端的共同的超类
当从多个子类访问超类的时候，新式搜索规则避免重复访问同一个超类
"""


class A:
    attr = 1


class B(A):
    pass


class C(A):
    attr = 2


class D(B, C):
    pass
    # attr = C.attr(明确解决冲突)


if __name__ == "__main__":
    """
    经典类来说搜索顺序是:D -> B -> A -> C (继承搜索是先往上搜索到最高，然后返回在往右搜索
          Python先搜索D、B、A，然后才是C(但是，当attr在A中找到时，B之上的就会停止))
    """
    """
    
    新式类(python3.0都是)：D -> C -> B -> A  
    新式类这样做的原因是程序员当写D的继承的时候，会想当然的认为C会覆盖A的属性，但是按照经典的
    继承并不会先继承C
    """
    x = D()
    print(x.attr)  # python2.6是1 Python3 是2
